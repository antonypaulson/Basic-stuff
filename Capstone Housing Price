{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Forest_Cover Type.ipynb",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "TPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/antonypaulson/Basic-stuff/blob/master/Capstone%20Housing%20Price\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "metadata": {
        "id": "dRvSqlalMsnd",
        "colab_type": "code",
        "outputId": "3ba3deca-0323-4694-e158-57221dfc4e3a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from IPython import display\n",
        "from matplotlib import cm\n",
        "from matplotlib import gridspec\n",
        "from tensorflow.python.data import Dataset\n",
        "from tensorflow import keras\n",
        "from keras.layers import Dense, BatchNormalization, Dropout"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "metadata": {
        "id": "4zwtDuZVNHvY",
        "colab_type": "code",
        "outputId": "d54cfd3f-dde4-43b6-f26a-848a262dc2f8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        }
      },
      "cell_type": "code",
      "source": [
        "tf.logging.set_verbosity(tf.logging.ERROR)\n",
        "pd.options.display.max_rows =10\n",
        "#pd.options.display.float_format = '{:.2f}'.format\n",
        "house_df = pd.read_csv('train.csv', sep = ',')\n",
        "house_df = house_df.reindex(np.random.permutation(house_df.index))\n",
        "house_df.head()\n"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>MSSubClass</th>\n",
              "      <th>MSZoning</th>\n",
              "      <th>LotFrontage</th>\n",
              "      <th>LotArea</th>\n",
              "      <th>Street</th>\n",
              "      <th>Alley</th>\n",
              "      <th>LotShape</th>\n",
              "      <th>LandContour</th>\n",
              "      <th>Utilities</th>\n",
              "      <th>...</th>\n",
              "      <th>PoolArea</th>\n",
              "      <th>PoolQC</th>\n",
              "      <th>Fence</th>\n",
              "      <th>MiscFeature</th>\n",
              "      <th>MiscVal</th>\n",
              "      <th>MoSold</th>\n",
              "      <th>YrSold</th>\n",
              "      <th>SaleType</th>\n",
              "      <th>SaleCondition</th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>980</th>\n",
              "      <td>981</td>\n",
              "      <td>85</td>\n",
              "      <td>RL</td>\n",
              "      <td>nan</td>\n",
              "      <td>12122</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>2008</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>178400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>676</th>\n",
              "      <td>677</td>\n",
              "      <td>70</td>\n",
              "      <td>RM</td>\n",
              "      <td>60.00</td>\n",
              "      <td>9600</td>\n",
              "      <td>Pave</td>\n",
              "      <td>Grvl</td>\n",
              "      <td>Reg</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>2006</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>87000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>560</th>\n",
              "      <td>561</td>\n",
              "      <td>20</td>\n",
              "      <td>RL</td>\n",
              "      <td>nan</td>\n",
              "      <td>11341</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>IR1</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>2010</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>121500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>279</th>\n",
              "      <td>280</td>\n",
              "      <td>60</td>\n",
              "      <td>RL</td>\n",
              "      <td>83.00</td>\n",
              "      <td>10005</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Reg</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>2008</td>\n",
              "      <td>WD</td>\n",
              "      <td>Normal</td>\n",
              "      <td>192000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>728</th>\n",
              "      <td>729</td>\n",
              "      <td>90</td>\n",
              "      <td>RL</td>\n",
              "      <td>85.00</td>\n",
              "      <td>11475</td>\n",
              "      <td>Pave</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Reg</td>\n",
              "      <td>Lvl</td>\n",
              "      <td>AllPub</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>2009</td>\n",
              "      <td>COD</td>\n",
              "      <td>Abnorml</td>\n",
              "      <td>110000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 81 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
              "980  981          85       RL          nan    12122   Pave   NaN      IR1   \n",
              "676  677          70       RM        60.00     9600   Pave  Grvl      Reg   \n",
              "560  561          20       RL          nan    11341   Pave   NaN      IR1   \n",
              "279  280          60       RL        83.00    10005   Pave   NaN      Reg   \n",
              "728  729          90       RL        85.00    11475   Pave   NaN      Reg   \n",
              "\n",
              "    LandContour Utilities    ...     PoolArea PoolQC Fence MiscFeature  \\\n",
              "980         Lvl    AllPub    ...            0    NaN   NaN         NaN   \n",
              "676         Lvl    AllPub    ...            0    NaN   NaN         NaN   \n",
              "560         Lvl    AllPub    ...            0    NaN   NaN         NaN   \n",
              "279         Lvl    AllPub    ...            0    NaN   NaN         NaN   \n",
              "728         Lvl    AllPub    ...            0    NaN   NaN         NaN   \n",
              "\n",
              "    MiscVal MoSold YrSold  SaleType  SaleCondition  SalePrice  \n",
              "980       0      7   2008        WD         Normal     178400  \n",
              "676       0      5   2006        WD         Normal      87000  \n",
              "560       0      5   2010        WD         Normal     121500  \n",
              "279       0      3   2008        WD         Normal     192000  \n",
              "728       0      7   2009       COD        Abnorml     110000  \n",
              "\n",
              "[5 rows x 81 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "metadata": {
        "id": "g_gMwBw1PVjy",
        "colab_type": "code",
        "outputId": "240822f1-94b1-4dcd-ef81-3e77a2dc44f8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 323
        }
      },
      "cell_type": "code",
      "source": [
        "house_df.columns"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n",
              "       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n",
              "       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n",
              "       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n",
              "       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n",
              "       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n",
              "       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n",
              "       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n",
              "       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n",
              "       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n",
              "       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n",
              "       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n",
              "       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n",
              "       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n",
              "       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n",
              "       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n",
              "       'SaleCondition', 'SalePrice'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "metadata": {
        "id": "cxN80OX6VADL",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        "def preprocess(house_df):\n",
        "  select_features = house_df[['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n",
        "       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n",
        "       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n",
        "       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n",
        "       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n",
        "       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n",
        "       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n",
        "       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n",
        "       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n",
        "       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n",
        "       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n",
        "       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n",
        "       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n",
        "       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n",
        "       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n",
        "       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n",
        "       'SaleCondition']]\n",
        "  process_features = select_features\n",
        "  return process_features\n",
        "\n",
        "def preprocess_target(house_df):\n",
        "  output_targets = house_df[['SalePrice']]\n",
        "  return output_targets"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "L76VtEghb7Zm",
        "colab_type": "code",
        "outputId": "e3a24acd-c61a-456a-e32f-53dadf8a96d8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1283
        }
      },
      "cell_type": "code",
      "source": [
        "#Training Data\n",
        "training_sample = preprocess(house_df.head(1000))\n",
        "training_target = preprocess_target(house_df.head(1000))\n",
        "\n",
        "#Validation Data\n",
        "validation_sample = preprocess(house_df.tail(400))\n",
        "validation_target = preprocess_target(house_df.tail(400))\n",
        "\n",
        "print (\"Training example summary:\")\n",
        "display.display(training_sample.describe())\n",
        "\n",
        "print('Validation example summary: ')\n",
        "display.display(validation_sample.describe())\n",
        "\n",
        "print('Training target summary:')\n",
        "display.display(training_target.describe())\n",
        "\n",
        "print ('Validation Target summary:')\n",
        "display.display(validation_target.describe())\n"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Training example summary:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>MSSubClass</th>\n",
              "      <th>LotFrontage</th>\n",
              "      <th>LotArea</th>\n",
              "      <th>OverallQual</th>\n",
              "      <th>OverallCond</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>YearRemodAdd</th>\n",
              "      <th>MasVnrArea</th>\n",
              "      <th>BsmtFinSF1</th>\n",
              "      <th>...</th>\n",
              "      <th>GarageArea</th>\n",
              "      <th>WoodDeckSF</th>\n",
              "      <th>OpenPorchSF</th>\n",
              "      <th>EnclosedPorch</th>\n",
              "      <th>3SsnPorch</th>\n",
              "      <th>ScreenPorch</th>\n",
              "      <th>PoolArea</th>\n",
              "      <th>MiscVal</th>\n",
              "      <th>MoSold</th>\n",
              "      <th>YrSold</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>824.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>994.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>...</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "      <td>1000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>730.42</td>\n",
              "      <td>56.87</td>\n",
              "      <td>69.77</td>\n",
              "      <td>10496.32</td>\n",
              "      <td>6.13</td>\n",
              "      <td>5.56</td>\n",
              "      <td>1971.69</td>\n",
              "      <td>1984.73</td>\n",
              "      <td>108.03</td>\n",
              "      <td>434.57</td>\n",
              "      <td>...</td>\n",
              "      <td>473.69</td>\n",
              "      <td>92.10</td>\n",
              "      <td>46.95</td>\n",
              "      <td>20.40</td>\n",
              "      <td>3.85</td>\n",
              "      <td>14.01</td>\n",
              "      <td>3.00</td>\n",
              "      <td>51.49</td>\n",
              "      <td>6.28</td>\n",
              "      <td>2007.81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>419.09</td>\n",
              "      <td>41.94</td>\n",
              "      <td>23.87</td>\n",
              "      <td>10248.12</td>\n",
              "      <td>1.39</td>\n",
              "      <td>1.11</td>\n",
              "      <td>29.72</td>\n",
              "      <td>20.59</td>\n",
              "      <td>190.94</td>\n",
              "      <td>466.15</td>\n",
              "      <td>...</td>\n",
              "      <td>218.86</td>\n",
              "      <td>121.33</td>\n",
              "      <td>67.82</td>\n",
              "      <td>57.89</td>\n",
              "      <td>31.88</td>\n",
              "      <td>53.40</td>\n",
              "      <td>42.75</td>\n",
              "      <td>585.77</td>\n",
              "      <td>2.67</td>\n",
              "      <td>1.32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.00</td>\n",
              "      <td>20.00</td>\n",
              "      <td>21.00</td>\n",
              "      <td>1300.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1880.00</td>\n",
              "      <td>1950.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>2006.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>367.75</td>\n",
              "      <td>20.00</td>\n",
              "      <td>59.00</td>\n",
              "      <td>7696.25</td>\n",
              "      <td>5.00</td>\n",
              "      <td>5.00</td>\n",
              "      <td>1954.00</td>\n",
              "      <td>1967.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>319.75</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>5.00</td>\n",
              "      <td>2007.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>736.50</td>\n",
              "      <td>50.00</td>\n",
              "      <td>70.00</td>\n",
              "      <td>9549.50</td>\n",
              "      <td>6.00</td>\n",
              "      <td>5.00</td>\n",
              "      <td>1973.00</td>\n",
              "      <td>1993.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>367.50</td>\n",
              "      <td>...</td>\n",
              "      <td>479.50</td>\n",
              "      <td>0.00</td>\n",
              "      <td>25.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>2008.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1077.25</td>\n",
              "      <td>70.00</td>\n",
              "      <td>80.00</td>\n",
              "      <td>11628.50</td>\n",
              "      <td>7.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>2001.00</td>\n",
              "      <td>2004.00</td>\n",
              "      <td>169.75</td>\n",
              "      <td>704.25</td>\n",
              "      <td>...</td>\n",
              "      <td>582.25</td>\n",
              "      <td>168.00</td>\n",
              "      <td>68.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>8.00</td>\n",
              "      <td>2009.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1460.00</td>\n",
              "      <td>190.00</td>\n",
              "      <td>313.00</td>\n",
              "      <td>215245.00</td>\n",
              "      <td>10.00</td>\n",
              "      <td>9.00</td>\n",
              "      <td>2010.00</td>\n",
              "      <td>2010.00</td>\n",
              "      <td>1600.00</td>\n",
              "      <td>5644.00</td>\n",
              "      <td>...</td>\n",
              "      <td>1418.00</td>\n",
              "      <td>736.00</td>\n",
              "      <td>547.00</td>\n",
              "      <td>386.00</td>\n",
              "      <td>508.00</td>\n",
              "      <td>480.00</td>\n",
              "      <td>738.00</td>\n",
              "      <td>15500.00</td>\n",
              "      <td>12.00</td>\n",
              "      <td>2010.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows Ã— 37 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Id  MSSubClass  LotFrontage   LotArea  OverallQual  OverallCond  \\\n",
              "count 1000.00     1000.00       824.00   1000.00      1000.00      1000.00   \n",
              "mean   730.42       56.87        69.77  10496.32         6.13         5.56   \n",
              "std    419.09       41.94        23.87  10248.12         1.39         1.11   \n",
              "min      1.00       20.00        21.00   1300.00         1.00         1.00   \n",
              "25%    367.75       20.00        59.00   7696.25         5.00         5.00   \n",
              "50%    736.50       50.00        70.00   9549.50         6.00         5.00   \n",
              "75%   1077.25       70.00        80.00  11628.50         7.00         6.00   \n",
              "max   1460.00      190.00       313.00 215245.00        10.00         9.00   \n",
              "\n",
              "       YearBuilt  YearRemodAdd  MasVnrArea  BsmtFinSF1   ...    GarageArea  \\\n",
              "count    1000.00       1000.00      994.00     1000.00   ...       1000.00   \n",
              "mean     1971.69       1984.73      108.03      434.57   ...        473.69   \n",
              "std        29.72         20.59      190.94      466.15   ...        218.86   \n",
              "min      1880.00       1950.00        0.00        0.00   ...          0.00   \n",
              "25%      1954.00       1967.00        0.00        0.00   ...        319.75   \n",
              "50%      1973.00       1993.00        0.00      367.50   ...        479.50   \n",
              "75%      2001.00       2004.00      169.75      704.25   ...        582.25   \n",
              "max      2010.00       2010.00     1600.00     5644.00   ...       1418.00   \n",
              "\n",
              "       WoodDeckSF  OpenPorchSF  EnclosedPorch  3SsnPorch  ScreenPorch  \\\n",
              "count     1000.00      1000.00        1000.00    1000.00      1000.00   \n",
              "mean        92.10        46.95          20.40       3.85        14.01   \n",
              "std        121.33        67.82          57.89      31.88        53.40   \n",
              "min          0.00         0.00           0.00       0.00         0.00   \n",
              "25%          0.00         0.00           0.00       0.00         0.00   \n",
              "50%          0.00        25.00           0.00       0.00         0.00   \n",
              "75%        168.00        68.00           0.00       0.00         0.00   \n",
              "max        736.00       547.00         386.00     508.00       480.00   \n",
              "\n",
              "       PoolArea  MiscVal  MoSold  YrSold  \n",
              "count   1000.00  1000.00 1000.00 1000.00  \n",
              "mean       3.00    51.49    6.28 2007.81  \n",
              "std       42.75   585.77    2.67    1.32  \n",
              "min        0.00     0.00    1.00 2006.00  \n",
              "25%        0.00     0.00    5.00 2007.00  \n",
              "50%        0.00     0.00    6.00 2008.00  \n",
              "75%        0.00     0.00    8.00 2009.00  \n",
              "max      738.00 15500.00   12.00 2010.00  \n",
              "\n",
              "[8 rows x 37 columns]"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Validation example summary: \n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>MSSubClass</th>\n",
              "      <th>LotFrontage</th>\n",
              "      <th>LotArea</th>\n",
              "      <th>OverallQual</th>\n",
              "      <th>OverallCond</th>\n",
              "      <th>YearBuilt</th>\n",
              "      <th>YearRemodAdd</th>\n",
              "      <th>MasVnrArea</th>\n",
              "      <th>BsmtFinSF1</th>\n",
              "      <th>...</th>\n",
              "      <th>GarageArea</th>\n",
              "      <th>WoodDeckSF</th>\n",
              "      <th>OpenPorchSF</th>\n",
              "      <th>EnclosedPorch</th>\n",
              "      <th>3SsnPorch</th>\n",
              "      <th>ScreenPorch</th>\n",
              "      <th>PoolArea</th>\n",
              "      <th>MiscVal</th>\n",
              "      <th>MoSold</th>\n",
              "      <th>YrSold</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>324.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>398.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>...</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "      <td>400.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>720.02</td>\n",
              "      <td>55.89</td>\n",
              "      <td>71.19</td>\n",
              "      <td>10641.39</td>\n",
              "      <td>6.07</td>\n",
              "      <td>5.64</td>\n",
              "      <td>1970.22</td>\n",
              "      <td>1985.14</td>\n",
              "      <td>94.31</td>\n",
              "      <td>467.69</td>\n",
              "      <td>...</td>\n",
              "      <td>472.58</td>\n",
              "      <td>99.87</td>\n",
              "      <td>46.22</td>\n",
              "      <td>26.34</td>\n",
              "      <td>2.01</td>\n",
              "      <td>17.77</td>\n",
              "      <td>1.28</td>\n",
              "      <td>22.25</td>\n",
              "      <td>6.43</td>\n",
              "      <td>2007.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>425.21</td>\n",
              "      <td>42.78</td>\n",
              "      <td>25.94</td>\n",
              "      <td>9890.70</td>\n",
              "      <td>1.37</td>\n",
              "      <td>1.14</td>\n",
              "      <td>31.09</td>\n",
              "      <td>20.70</td>\n",
              "      <td>160.50</td>\n",
              "      <td>438.89</td>\n",
              "      <td>...</td>\n",
              "      <td>204.26</td>\n",
              "      <td>137.88</td>\n",
              "      <td>62.38</td>\n",
              "      <td>69.41</td>\n",
              "      <td>18.52</td>\n",
              "      <td>59.87</td>\n",
              "      <td>25.60</td>\n",
              "      <td>170.45</td>\n",
              "      <td>2.77</td>\n",
              "      <td>1.35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>11.00</td>\n",
              "      <td>20.00</td>\n",
              "      <td>21.00</td>\n",
              "      <td>1477.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1872.00</td>\n",
              "      <td>1950.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>2006.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>343.50</td>\n",
              "      <td>20.00</td>\n",
              "      <td>60.00</td>\n",
              "      <td>7402.00</td>\n",
              "      <td>5.00</td>\n",
              "      <td>5.00</td>\n",
              "      <td>1953.00</td>\n",
              "      <td>1966.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>...</td>\n",
              "      <td>337.50</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>5.00</td>\n",
              "      <td>2007.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>706.50</td>\n",
              "      <td>50.00</td>\n",
              "      <td>70.00</td>\n",
              "      <td>9323.50</td>\n",
              "      <td>6.00</td>\n",
              "      <td>5.00</td>\n",
              "      <td>1972.00</td>\n",
              "      <td>1994.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>428.50</td>\n",
              "      <td>...</td>\n",
              "      <td>479.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>23.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>2008.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1121.75</td>\n",
              "      <td>70.00</td>\n",
              "      <td>80.00</td>\n",
              "      <td>11475.75</td>\n",
              "      <td>7.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>1999.25</td>\n",
              "      <td>2004.00</td>\n",
              "      <td>150.25</td>\n",
              "      <td>716.00</td>\n",
              "      <td>...</td>\n",
              "      <td>572.00</td>\n",
              "      <td>168.00</td>\n",
              "      <td>70.50</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>8.00</td>\n",
              "      <td>2009.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1457.00</td>\n",
              "      <td>190.00</td>\n",
              "      <td>313.00</td>\n",
              "      <td>164660.00</td>\n",
              "      <td>10.00</td>\n",
              "      <td>9.00</td>\n",
              "      <td>2009.00</td>\n",
              "      <td>2009.00</td>\n",
              "      <td>1031.00</td>\n",
              "      <td>1810.00</td>\n",
              "      <td>...</td>\n",
              "      <td>1390.00</td>\n",
              "      <td>857.00</td>\n",
              "      <td>312.00</td>\n",
              "      <td>552.00</td>\n",
              "      <td>216.00</td>\n",
              "      <td>410.00</td>\n",
              "      <td>512.00</td>\n",
              "      <td>2000.00</td>\n",
              "      <td>12.00</td>\n",
              "      <td>2010.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows Ã— 37 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "           Id  MSSubClass  LotFrontage   LotArea  OverallQual  OverallCond  \\\n",
              "count  400.00      400.00       324.00    400.00       400.00       400.00   \n",
              "mean   720.02       55.89        71.19  10641.39         6.07         5.64   \n",
              "std    425.21       42.78        25.94   9890.70         1.37         1.14   \n",
              "min     11.00       20.00        21.00   1477.00         3.00         2.00   \n",
              "25%    343.50       20.00        60.00   7402.00         5.00         5.00   \n",
              "50%    706.50       50.00        70.00   9323.50         6.00         5.00   \n",
              "75%   1121.75       70.00        80.00  11475.75         7.00         6.00   \n",
              "max   1457.00      190.00       313.00 164660.00        10.00         9.00   \n",
              "\n",
              "       YearBuilt  YearRemodAdd  MasVnrArea  BsmtFinSF1   ...    GarageArea  \\\n",
              "count     400.00        400.00      398.00      400.00   ...        400.00   \n",
              "mean     1970.22       1985.14       94.31      467.69   ...        472.58   \n",
              "std        31.09         20.70      160.50      438.89   ...        204.26   \n",
              "min      1872.00       1950.00        0.00        0.00   ...          0.00   \n",
              "25%      1953.00       1966.00        0.00        0.00   ...        337.50   \n",
              "50%      1972.00       1994.00        0.00      428.50   ...        479.00   \n",
              "75%      1999.25       2004.00      150.25      716.00   ...        572.00   \n",
              "max      2009.00       2009.00     1031.00     1810.00   ...       1390.00   \n",
              "\n",
              "       WoodDeckSF  OpenPorchSF  EnclosedPorch  3SsnPorch  ScreenPorch  \\\n",
              "count      400.00       400.00         400.00     400.00       400.00   \n",
              "mean        99.87        46.22          26.34       2.01        17.77   \n",
              "std        137.88        62.38          69.41      18.52        59.87   \n",
              "min          0.00         0.00           0.00       0.00         0.00   \n",
              "25%          0.00         0.00           0.00       0.00         0.00   \n",
              "50%          0.00        23.00           0.00       0.00         0.00   \n",
              "75%        168.00        70.50           0.00       0.00         0.00   \n",
              "max        857.00       312.00         552.00     216.00       410.00   \n",
              "\n",
              "       PoolArea  MiscVal  MoSold  YrSold  \n",
              "count    400.00   400.00  400.00  400.00  \n",
              "mean       1.28    22.25    6.43 2007.82  \n",
              "std       25.60   170.45    2.77    1.35  \n",
              "min        0.00     0.00    1.00 2006.00  \n",
              "25%        0.00     0.00    5.00 2007.00  \n",
              "50%        0.00     0.00    6.00 2008.00  \n",
              "75%        0.00     0.00    8.00 2009.00  \n",
              "max      512.00  2000.00   12.00 2010.00  \n",
              "\n",
              "[8 rows x 37 columns]"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Training target summary:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>181212.73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>80756.13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>34900.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>129500.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>164845.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>214000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>755000.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       SalePrice\n",
              "count    1000.00\n",
              "mean   181212.73\n",
              "std     80756.13\n",
              "min     34900.00\n",
              "25%    129500.00\n",
              "50%    164845.00\n",
              "75%    214000.00\n",
              "max    755000.00"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Validation Target summary:\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SalePrice</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>400.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>182413.24</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>79084.89</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>52000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>130000.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>162750.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>214125.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>582933.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       SalePrice\n",
              "count     400.00\n",
              "mean   182413.24\n",
              "std     79084.89\n",
              "min     52000.00\n",
              "25%    130000.00\n",
              "50%    162750.00\n",
              "75%    214125.00\n",
              "max    582933.00"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "46zryt4FeRQY",
        "colab_type": "code",
        "outputId": "c7107da3-c983-478d-8d92-ea1adfc92288",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 374
        }
      },
      "cell_type": "code",
      "source": [
        "# Now this is where Keras the mighty comes in\n",
        "\n",
        "model = keras.Sequential([\n",
        "    keras.layers.Dense(64, activation = tf.nn.relu,\n",
        "                      input_shape = (training_sample.shape[1],)),\n",
        "    keras.layers.BatchNormalization(),\n",
        "    keras.layers.Dropout(0.5),\n",
        "    keras.layers.Dense(64, activation = tf.nn.relu),\n",
        "    keras.layers.BatchNormalization(),\n",
        "    keras.layers.Dropout(0.5),\n",
        "    keras.layers.Dense(8, activation=tf.nn.softmax)\n",
        "])\n",
        "optimizer_a = keras.optimizers.Adam(lr=0.001)\n",
        "model.compile(loss='sparse_categorical_crossentropy',\n",
        "             optimizer = optimizer_a,\n",
        "             metrics = ['accuracy'])\n",
        "\n",
        "model.summary()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense (Dense)                (None, 64)                5184      \n",
            "_________________________________________________________________\n",
            "batch_normalization_v1 (Batc (None, 64)                256       \n",
            "_________________________________________________________________\n",
            "dropout (Dropout)            (None, 64)                0         \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 64)                4160      \n",
            "_________________________________________________________________\n",
            "batch_normalization_v1_1 (Ba (None, 64)                256       \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 64)                0         \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 8)                 520       \n",
            "=================================================================\n",
            "Total params: 10,376\n",
            "Trainable params: 10,120\n",
            "Non-trainable params: 256\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "HJg7fOOCjIL2",
        "colab_type": "code",
        "outputId": "76e65ffb-467e-4c76-8e6e-4eeee32e071d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 695
        }
      },
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "#To check whether our model runs\n",
        "class Dot(keras.callbacks.Callback):\n",
        "  def on_epoch_end(self, epoch, logs):\n",
        "    if epoch % 100 == 0 : print('')\n",
        "    print ('.', end='')\n",
        "    \n",
        "set_epoch = 100\n",
        "tf.set_random_seed(1)\n",
        "\n",
        "# Store training stats\n",
        "fitting = model.fit(training_sample, training_target, epochs = set_epoch, batch_size = 60,\n",
        "                   validation_split =0.2, verbose = 0,\n",
        "                   callbacks=[Dot()])"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-26-0dd076c675ea>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m fitting = model.fit(training_sample, training_target, epochs = set_epoch, batch_size = 60,\n\u001b[1;32m     11\u001b[0m                    \u001b[0mvalidation_split\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m                    callbacks=[Dot()])\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, max_queue_size, workers, use_multiprocessing, **kwargs)\u001b[0m\n\u001b[1;32m    878\u001b[0m           \u001b[0minitial_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitial_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    879\u001b[0m           \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 880\u001b[0;31m           validation_steps=validation_steps)\n\u001b[0m\u001b[1;32m    881\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    882\u001b[0m   def evaluate(self,\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mmodel_iteration\u001b[0;34m(model, inputs, targets, sample_weights, batch_size, epochs, verbose, callbacks, val_inputs, val_targets, val_sample_weights, shuffle, initial_epoch, steps_per_epoch, validation_steps, mode, validation_in_fit, **kwargs)\u001b[0m\n\u001b[1;32m    327\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    328\u001b[0m         \u001b[0;31m# Get outputs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 329\u001b[0;31m         \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    330\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_outs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    331\u001b[0m           \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mbatch_outs\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   3059\u001b[0m         \u001b[0mtensor_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdtypes_module\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtensor\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3060\u001b[0m         array_vals.append(np.asarray(value,\n\u001b[0;32m-> 3061\u001b[0;31m                                      dtype=tensor_type.as_numpy_dtype))\n\u001b[0m\u001b[1;32m   3062\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3063\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeed_dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/numpy/core/numeric.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m    490\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m     \"\"\"\n\u001b[0;32m--> 492\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    493\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    494\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'Normal'"
          ]
        }
      ]
    },
    {
      "metadata": {
        "id": "aXpvw9_rjmNa",
        "colab_type": "code",
        "outputId": "115d877a-3d5b-4a32-f8ad-c92f3a969117",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "cell_type": "code",
      "source": [
        "print(fitting.history)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'val_loss': [0.6442405593491961, 0.6836811587093561, 0.6893082773887703, 0.6755130121492184, 0.6510794794043598, 0.6696238861876563, 0.700922886848098, 0.6786649237401309, 0.6850969658118957, 0.6548414815034976, 0.6571979398424924, 0.6567913782312268, 0.6535297171882543, 0.6952485020004738, 0.6414510144380143, 0.6999067618640541, 0.6632077703685235, 0.6674635776480967, 0.6932033031028408, 0.6577667796497472, 0.6783149491474381, 0.6664097863243755, 0.6846737962171255, 0.694359047907648, 0.6616838299762068, 0.6767895316459167, 0.6576089974861928, 0.7004965769078006, 0.6406812280570373, 0.6613296380361351, 0.6458776724596471, 0.6496220196322255, 0.6566548285186511, 0.6488882498451554, 0.6894392555546109, 0.6559461349347079, 0.6951322988177624, 0.6881979886806067, 0.6461930315999279, 0.6577131735302466, 0.651117745798813, 0.6383879499746712, 0.6442737635696787, 0.6422868405377393, 0.6446928445672062, 0.6405882979746618, 0.6536929438044992, 0.6646419171109257, 0.6999715136344409, 0.6395836737998909, 0.6473068114299577, 0.6565347886038612, 0.6716310868238037, 0.6408165751832517, 0.6465121620933049, 0.6639289838370217, 0.6563111079583334, 0.6567533503139755, 0.6520752932446754, 0.6564770581272623, 0.6492103326590313, 0.6633342353987524, 0.6442718042226984, 0.6517090987361911, 0.6388919837049222, 0.6819310081233725, 0.6596072627822743, 0.6449024346937616, 0.645674284836101, 0.6587524860254634, 0.6410361122727424, 0.6892154403259867, 0.6504380598697259, 0.6408274302633266, 0.6428570889535571, 0.6386962813873212, 0.6773926850572276, 0.648889586061994, 0.646291725123166, 0.6655490455710685, 0.6412533862103635, 0.6590321057620141, 0.6411104275695457, 0.6779005114645872, 0.649518870907273, 0.6579275007165267, 0.6403710340102299, 0.6462348280490573, 0.648729365662506, 0.683121606755204, 0.6619429910449687, 0.6438583419558631, 0.6400196391430539, 0.6519672560961498, 0.6426017927411208, 0.666897199357321, 0.6451607811925802, 0.6704523088614303, 0.6479362929984103, 0.6592644022684705], 'val_acc': [0.7278952536578257, 0.7100196698241308, 0.6859355775530871, 0.7115072515223634, 0.724256207074174, 0.7202975162130215, 0.6992254722959613, 0.7116793692771475, 0.7089746730140599, 0.7243176780903049, 0.721809686651856, 0.7194984009613532, 0.7231866229744136, 0.6991762953863292, 0.7259527900777638, 0.6900909738983837, 0.7160191779233971, 0.7111630174930189, 0.6954143082946063, 0.7248954998646668, 0.6964715989180622, 0.7199655752056554, 0.7056798606649324, 0.6937791966149166, 0.7130563042074156, 0.7059749182536263, 0.7190312268489522, 0.689586917356569, 0.7310302423440124, 0.7171871154906857, 0.7254487332355076, 0.7243422664352034, 0.719301695301341, 0.7297270708216593, 0.70281534146436, 0.7261003179341474, 0.6987951788616203, 0.6884312744820063, 0.7268871399146906, 0.7181091698288243, 0.7227071545796456, 0.7255962613263821, 0.721551511294724, 0.725743791131971, 0.7270346681521218, 0.7243791484908974, 0.7243053837932824, 0.71920334306489, 0.6807597717240486, 0.7274772544911959, 0.7234079164517199, 0.7122940724916648, 0.7095033180106909, 0.7253134985183479, 0.7234939751972107, 0.7128841887682288, 0.718428815850351, 0.7227563297305964, 0.7181706397457793, 0.711544134098334, 0.7177895240417885, 0.7093066130468234, 0.7234570925113227, 0.7194123419520602, 0.7258298495257255, 0.7082370282509182, 0.7230145063041498, 0.7263707888193789, 0.7186378157047959, 0.7148512404000756, 0.7222522734599117, 0.6950454852755134, 0.720137692432835, 0.7228792713524992, 0.7281165467540843, 0.7263216115873218, 0.7082739098376304, 0.7232358001771594, 0.7196951053316657, 0.7121834260607809, 0.7241086788367428, 0.7160929425623893, 0.7250799103043488, 0.703577574125402, 0.7198057528324141, 0.7178632888419932, 0.7273666084413597, 0.724010325808885, 0.7193385776208372, 0.6899680334929023, 0.7121957206216056, 0.7212441587934688, 0.7266904342546784, 0.7150725329101071, 0.7228178009079398, 0.7223506265024251, 0.7230390940774768, 0.708323086908475, 0.7216990400304483, 0.7200270454743467], 'loss': [0.7093708773766685, 0.7096320375221233, 0.7088642124556516, 0.7087292807849497, 0.7081261189631112, 0.7087892789127114, 0.7113394639526915, 0.7111651322121757, 0.7100646363753108, 0.7118280205279333, 0.7097088213737954, 0.7091818070907044, 0.7079496793348167, 0.7099271239953279, 0.7080577632917477, 0.7085442926330738, 0.7081695827246738, 0.7074619280011788, 0.7077859337335141, 0.7089678862953995, 0.7061010574679689, 0.706373027850786, 0.7066007286606973, 0.7061314654674171, 0.7087301196008811, 0.7115144381816686, 0.7098269919604466, 0.7111734483003587, 0.7096601853008379, 0.7083731050137545, 0.7093077375825365, 0.707736385252967, 0.7083936990871897, 0.7076602633836406, 0.707786005504204, 0.7063408565661935, 0.7073722570412775, 0.7083221294859688, 0.7066320387886085, 0.707210117379922, 0.7062168174006735, 0.7063471633645073, 0.7061411802605883, 0.706821675952556, 0.7060278808184651, 0.7059773376496852, 0.7059584445161377, 0.7060075291188103, 0.7043038846318981, 0.7048825940823918, 0.7047095549727266, 0.70393708240555, 0.7054308183254907, 0.7047723115483431, 0.705172867969664, 0.7040823974156808, 0.7080119387256973, 0.707755254699274, 0.706088824191696, 0.7066223432310155, 0.7076054171684013, 0.7078918733979608, 0.7068395698106432, 0.707447757612422, 0.7050655887578757, 0.707472199794406, 0.7067352563128121, 0.7052474684751324, 0.7059090539596871, 0.7056860946758186, 0.7051459568572596, 0.7061433884188558, 0.7056121128451657, 0.7056205584437483, 0.7057238708854542, 0.7049635192606061, 0.705222670286564, 0.7058428550527903, 0.7060663467866213, 0.7064847999092312, 0.7067432739582523, 0.7072858946173027, 0.7059792739249636, 0.708008359382142, 0.705834153419503, 0.7062640292824179, 0.7064389310500562, 0.7065882578928171, 0.7056348512037574, 0.7059982721690379, 0.7069523884054482, 0.7051385081214462, 0.7070276469985155, 0.7054840452256442, 0.7059224727686072, 0.7066475918215618, 0.7056097227091692, 0.7053505953008372, 0.7047477194076238, 0.7050987704196051], 'acc': [0.7039679106181103, 0.7037896466344588, 0.7042322332226794, 0.70368822045736, 0.70411544001334, 0.7037343232193332, 0.703568353587663, 0.7033655012572811, 0.7040324548585924, 0.7036083089666341, 0.7038664842889588, 0.7039341021073606, 0.7045149970272996, 0.7035314717261569, 0.7039125869904773, 0.7036728532584111, 0.7040263080471618, 0.7044781148616881, 0.7041922778363805, 0.7038265285619154, 0.7046871145622484, 0.7050159806360446, 0.7042199392535776, 0.7049452897618319, 0.7043398071564999, 0.7038296024347805, 0.7039924994429823, 0.7027477239555594, 0.7036728530623915, 0.7042906302523636, 0.7038879992977565, 0.7040232340423956, 0.7046440845886202, 0.7039802045817161, 0.7038634112917705, 0.7051020392899376, 0.7043859092699594, 0.7035345452381259, 0.7042445272943708, 0.7042875564747605, 0.704702481728222, 0.7053540674454315, 0.7052987446751559, 0.7040201610067361, 0.7045488054904183, 0.7042383805507226, 0.703958690089531, 0.705172730087208, 0.7055476995623314, 0.7049852455804733, 0.7053479207604061, 0.7053970966587965, 0.7049299220774137, 0.7056614202636157, 0.7052956712291374, 0.7056030227557898, 0.7015582722899572, 0.7021821965514984, 0.7035314712480154, 0.702944429003697, 0.7028737382815369, 0.7022621078663561, 0.7024065634290241, 0.7024772546018463, 0.70371280883157, 0.7027016213163275, 0.7027692384972073, 0.7032394872409048, 0.7031933845192347, 0.7040662634481163, 0.7026862531116327, 0.7032978836220753, 0.70334706032836, 0.7029966788280793, 0.7028921790016146, 0.7043490272014418, 0.7038849256135833, 0.7029075469296835, 0.703257928076396, 0.7024127105976868, 0.7022282992731683, 0.7027200623771498, 0.7029444292491797, 0.7022006377368938, 0.7039771316706299, 0.7035560599373224, 0.7034054569366935, 0.7023266519602815, 0.7034392656617825, 0.7028030472241281, 0.7028552971877394, 0.7032640750270556, 0.7027323561960308, 0.7027354297043359, 0.7042383804591247, 0.7029044738152498, 0.7038234554218343, 0.7032732953101521, 0.7040662629644789, 0.702852223650123]}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "metadata": {
        "id": "drWuPK9FjuGb",
        "colab_type": "code",
        "outputId": "7c4f1efb-2f0b-4e5e-8998-a59ce741cdbf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        }
      },
      "cell_type": "code",
      "source": [
        "#Plotting the model\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "def plot_history(history):\n",
        "  plt.figure()\n",
        "  plt.xlabel('Epoch')\n",
        "  plt.ylabel('Accuracy')\n",
        "  plt.plot(history.epoch, np.array(history.history['acc']), label = 'Train acc')\n",
        "  plt.plot(history.epoch, np.array(history.history['val_acc']), label = 'Validation acc')\n",
        "  plt.legend()\n",
        "  plt.ylim([0,1])\n",
        "plot_history(fitting)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\npnPegwcP5vvf/z733nsvpaWlzJo1i6uvvjp0kxURERE5fnrsee/fv59XX32V119/nYEDB3Lrrbdy\n9tlns2nTJv7f//t//N///d/xqFNEREQ69Bje1157LVdccQV/+ctfyMzMDD1fWFiooXMREZEToMdh\n80WLFpGbmxsK7nnz5tHc3AzAgw8+GNnqRERE5Cg9hvd9993X6dvB2trauPvuuyNalIiIiHSvx/Cu\nq6vjuuuuCz3+7ne/S0NDQ0SLEhERke71GN5er7fTjVo2b96M1+uNaFEiIiLSvR4vWLvvvvuYNWsW\njY2N+P1+UlNTeeyxx45HbSIiItKFHsN75MiRLF68mNraWgzDIDk5mXXr1h2P2kRERKQLPYZ3U1MT\n//znP6mtrQWCw+gLFixg6dKlES9OREREjtbjOe8777yTbdu2sXDhQpqbm3nvvfd46KGHjkNpIiIi\n0pUew7u9vZ2f/vSn5OTkcM899/DCCy/w5ptvHo/aREREpAvHdLV5S0sLgUCA2tpakpOT2bt37/Go\nTURERLrQ4znvyy67jJdffplp06ZxySWXkJqaSr9+/Y5HbSIiItKFHsN7xowZGIYBwIQJE6iurmbY\nsGERL0xERES61uOw+ZF3V8vMzGT48OGhMBcREZHjr8ee97Bhw/jf//1fRo0ahd1uDz0/YcKEiBYm\nIiIiXesxvIuLiwFYs2ZN6DnDMBTeIiIiJ0iP4f3Xv/71eNQhIiIix6jH8P72t7/d5Tnul156KSIF\niYiIyGfrMbzvvPPO0M9er5cVK1YQHx8f0aJERESkez2G9/jx4zs9njhxIjfffHPEChIREZHP1mN4\nf/puauXl5ezatStiBYmIiMhn6zG8r7/++tDPhmHgdDq54447IlqUiIiIdK/H8H733XcJBAJYLMH7\nuXi93k6f9xYREZHjq8c7rC1evJhZs2aFHl999dW89dZbES1KREREutdjeD///PP84he/CD1+7rnn\neP755yNalIiIiHSvx/A2TROXyxV67HQ6dW9zERGRE6jHc94FBQXceeedjB8/HtM0WbJkCQUFBcej\nNhEREelCj+H9wAMPsGjRIj7++GMMw+Ab3/gGU6dOPR61iYiISBd6DO/W1lbsdjsPPvggAPPmzaO1\ntZWEhISIFyciIiJH6/Gc9z333ENVVVXocVtbG3fffXdEixIREZHu9RjedXV1XHfddaHH3/3ud2lo\naIhoUSIiItK9HsPb6/VSWloaerxp0ya8Xm9EixIREZHu9XjO+7777mPWrFk0NjYSCARISUnhscce\nOx61iYiISBd6DO+RI0eyePFiysvLWblyJa+++iq33XYbS5cuPR71iYiIyKf0GN4bNmxg4cKFvPHG\nGwQCAR5++GEuvPDC41GbiIiIdKHbc95PP/00l1xyCT/4wQ9ITU1lwYIF9O3bl6997Wv6YhIREZET\nqNue969//WsGDhzIj3/8Y8444wwA3RZVRETkJNBteL///vu8+uqrzJ49m0AgwLe+9S1dZS4iInIS\n6HbY3O12M3PmTBYvXszcuXPZs2cP+/fv59Zbb+WDDz44njWKiIjIEXr8nDfAuHHjePTRR1myZAnn\nnnsuTz31VKTrEhERkW4cU3gf5nQ6mTFjBi+//HKk6hEREZEefK7wFhERkRNP4S0iIhJlIhrec+fO\nZfr06cyYMYOPP/64y995/PHHufbaayNZhoiIyCklYuG9atUqysrKmD9/PnPmzGHOnDlH/U5JSQmr\nV6+OVAkiIiKnpIiF9/Lly5k8eTIAeXl51NfX09TU1Ol3Hn30UX7wgx9EqgQREZFTUo/3Nv+iqqqq\nyM/PDz1OTU2lsrISp9MJwMKFCxk/fjw5OTnHtLyUlHhsNmtYa3S7XWFd3leV2jE81I7hoXYMD7Vj\neESqHSMW3p9mmmbo57q6OhYuXMjzzz/PoUOHjmn+2tqWsNbjdruorGwM6zK/itSO4aF2DA+1Y3io\nHcMjHO3YXfhHbNg8IyODqqqq0OOKigrcbjcAK1asoKamhquvvpo77riDoqIi5s6dG6lSRERETikR\nC++JEyeyePFiAIqKisjIyAgNmU+dOpU33niDl19+md/+9rfk5+dz//33R6oUERGRU0rEhs1Hjx5N\nfn4+M2bMwDAMZs+ezcKFC3G5XEyZMiVSLysiInLKM8wjT0afxMJ9/kXndMJD7RgeasfwUDuGh9ox\nPKLynLeIiIhEhsJbREQkyii8RUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESijMJbREQkyii8\nRUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESijMJbREQkyii8RUREoozCW0REJMoovEVERKKM\nwltERCTKKLxFRESijMJbREQkyii8RUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESijMJbREQk\nyii8RUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESijMJbREQkyii8RUREoozCW0REJMoovEVE\nRKKMwltERCTKKLxFRESijMJbREQkyii8RUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESijMJb\nREQkyii8RUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESijMJbREQkytgiufC5c+eyceNGDMPg\n/vvvp7CwMDRtxYoVPPHEE1gsFvr378+cOXOwWHQsISIi0pOIpeWqVasoKytj/vz5zJkzhzlz5nSa\n/uMf/5gnn3ySv//97zQ3N7NkyZJIlSIiInJKiVh4L1++nMmTJwOQl5dHfX09TU1NoekLFy6kV69e\nAKSmplJbWxupUkRERE4pEQvvqqoqUlJSQo9TU1OprKwMPXY6nQBUVFSwbNkyJk2aFKlSRERETikR\nPed9JNM0j3quurqaW2+9ldmzZ3cK+q6kpMRjs1nDWpPb7Qrr8r6q1I7hoXYMD7VjeKgdwyNS7Rix\n8M7IyKCqqir0uKKiArfbHXrc1NTEzTffzJ133slZZ53V4/Jqa1vCWp/b7aKysjGsy/wqUjuGh9ox\nPNSO4aF2DI9wtGN34R+xYfOJEyeyePFiAIqKisjIyAgNlQM8+uijXH/99ZxzzjmRKkFEROSUFLGe\n9+jRo8nPz2fGjBkYhsHs2bNZuHAhLpeLs846i3/84x+UlZXxyiuvAHDppZcyffr0SJUjIiJyyojo\nOe8f/ehHnR4PHTo09PPmzZsj+dIiIiKnLN0VRUREJMoovEVERKKMwltERCTKKLxFRESijMJbREQk\nyii8RUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESijMJbREQkyii8RUREoozCW0REJMoovEVE\nRKKMwltERCTKKLxFRESijMJbREQkyii8RUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESijMJb\nREQkyii8RUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESijMJbREQkyii8RUREoozCW0REJMoo\nvEVERKKMwltERCTKKLxFRESijMJbREQkyii8RUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESi\njMJbREQkyii8RUREoozCW0REJMoovEVERKKMwltERCTKKLxFRESijMJbREQkyii8RUREoozCW0RE\n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\n",
            "text/plain": [
              "<matplotlib.figure.Figure at 0x7f8f4b0fca20>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "metadata": {
        "id": "qZvDBMqQv8Cm",
        "colab_type": "text"
      },
      "cell_type": "markdown",
      "source": [
        "#**Brief Description of Improvements made:**\n",
        "\n",
        "\n",
        "*  In the previous submission the accuracy obtained was around 40%, Employing a few changes to the model an accuracy close to 70 % was attained\n",
        "*  This was achieved by employing batch normalisation added after the dense layers\n",
        "*  Additionally dropout layers were added for regularisation.\n",
        "*  I also increased the epochs to 100. However this did not make much difference. Since the results were similar when the epochs were 25.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "metadata": {
        "id": "3zvT1otujyzu",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "metadata": {
        "id": "4NfRoZ9iLKoI",
        "colab_type": "code",
        "colab": {}
      },
      "cell_type": "code",
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}